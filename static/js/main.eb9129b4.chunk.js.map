{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TranslateInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","dict","engineer","mühendis","efficiency","verimlilik","empirical","deneysel","chip","yontmak","force","kuvvet","friction","sürtünme","block and tackle","palanga takımı","lever","kaldıraç","fulcrum","dayanak","alloy","alaşım","angle","köşe","beam","kiriş","belt","kayış","bolt","civata","carbide","karbür","cement","çimento","betül","dünyanın en güzel kızı","mirkan","state","myWord","translatedWord","val","undefined","setState","_this2","react_default","a","createElement","className","onChange","e","target","value","toLowerCase","onClick","clickTranslate","Component","App","App_TranslateInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,qBACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,KAAO,CACHC,SAAU,cACVC,cAAU,WACVC,WAAY,aACZC,WAAY,aACZC,UAAW,WACXC,SAAU,YACVC,KAAM,UACNC,QAAS,OACTC,MAAO,SACPC,OAAQ,QACRC,SAAU,iBACVC,iBAAU,WACVC,mBAAoB,2BACpBC,2BAAkB,mBAClBC,MAAO,mBACPC,mBAAY,QACZC,QAAS,UACTC,QAAS,UACTC,MAAO,mBACPC,mBAAQ,QACRC,MAAO,eACPC,eAAM,QACNC,KAAM,aACNC,aAAO,OACPC,KAAM,kBACNC,kBAAO,OACPC,KAAM,SACNC,OAAQ,OACRC,QAAS,YACTC,YAAQ,UACRC,OAAQ,aACRC,aAAS,SACTC,WAAO,8CACPC,8CAA0B,WAC1BC,OAAQ,4FAzCR1C,EAAK2C,MAAQ,CACTC,OAAQ,GACRC,eAAgB,IAJL7C,gFAgDf,IAAI8C,EAAM3C,KAAKI,KAAKJ,KAAKwC,MAAMC,aACpBG,IAARD,EACC3C,KAAK6C,SAAS,CAACH,eAAgB,4CAE/B1C,KAAK6C,SAAS,CAACH,eAAgBC,qCAK9B,IAAAG,EAAA9C,KACL,OACI+C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,OAAOC,SAAU,SAACC,GAC/BN,EAAKD,SAAS,CAACJ,OAAQW,EAAEC,OAAOC,MAAMC,mBAE1CR,EAAAC,EAAAC,cAAA,UAAKjD,KAAKwC,MAAMC,QAChBM,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMM,QAAS,WAC7BV,EAAKW,mBADT,cAIAV,EAAAC,EAAAC,cAAA,UAAKjD,KAAKwC,MAAME,wBArEHgB,cAwFdC,mLAVP,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aACdH,EAAAC,EAAAC,cAACW,EAAD,eALFF,aCnEEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eb9129b4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass TranslateInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            myWord: \"\",\n            translatedWord: \"\"\n        }\n    }\n\n    dict = {\n        engineer: 'mühendis',\n        mühendis: 'engineer',\n        efficiency: 'verimlilik',\n        verimlilik: 'efficiency',\n        empirical: 'deneysel',\n        deneysel: 'empirical',\n        chip: 'yontmak',\n        yontmak: 'chip',\n        force: 'kuvvet',\n        kuvvet: 'force',\n        friction: 'sürtünme',\n        sürtünme: 'friction',\n        'block and tackle': 'palanga takımı',\n        'palanga takımı': 'block and tackle',\n        lever: 'kaldıraç',\n        'kaldıraç': 'lever',\n        fulcrum: 'dayanak',\n        dayanak: 'fulcrum',\n        alloy: 'alaşım',\n        alaşım: 'alloy',\n        angle: 'köşe',\n        köşe: 'angle',\n        beam: 'kiriş',\n        kiriş: 'beam',\n        belt: 'kayış',\n        kayış: 'belt',\n        bolt: 'civata',\n        civata: 'bolt',\n        carbide: 'karbür',\n        karbür: 'carbide',\n        cement: 'çimento',\n        çimento: 'cement',\n        betül: 'dünyanın en güzel kızı',\n        'dünyanın en güzel kızı': 'betül',\n        mirkan: 'Uygulamamızı kullandığınız için teşekkür ederiz'\n      \n      }\n\n    clickTranslate() {\n        let val = this.dict[this.state.myWord];\n        if(val === undefined) {\n            this.setState({translatedWord: \"Not in the database, will be added soon\"})\n        } else {\n            this.setState({translatedWord: val})\n        }\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <input className=\"form\" onChange={(e) => {\n                    this.setState({myWord: e.target.value.toLowerCase()})\n                }}/>\n                <h1>{this.state.myWord}</h1>\n                <button className=\"btn\" onClick={() => {\n                    this.clickTranslate()\n                }}>Translate!\n                </button>\n                <h1>{this.state.translatedWord}</h1>\n            </div>\n        );\n    }\n}\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"container\">\n                    <TranslateInput/>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}